/** Declaration file generated by dts-gen */

export class ChainedTunnel {
    constructor(tunnelChain: any, ...args: any[]);

    connect(data: any): void;

    disconnect(): void;

    sendMessage(elements: any): void;

    setState(state: any): void;

}

export class HTTPTunnel {
    constructor(tunnelURL: any, crossDomain: any, extraTunnelHeaders: any, ...args: any[]);

    connect(data: any): void;

    disconnect(): void;

    sendMessage(elements: any): void;

    setState(state: any): void;

}

export class RawAudioRecorder {
    constructor(stream: any, mimetype: any);

    static getSupportedTypes(): any;

    static isSupportedType(mimetype: any): any;

    static prototype: {
        onclose: any;
        onerror: any;
    };

}

export class StaticHTTPTunnel {
    constructor(url: any, crossDomain: any, extraTunnelHeaders: any);

    connect(data: any): void;

    disconnect(): void;

    sendMessage(elements: any): void;

    setState(state: any): void;

}

export class WebSocketTunnel {
    constructor(tunnelURL: any, ...args: any[]);

    connect(data: any): void;

    disconnect(): void;

    sendMessage(elements: any): void;

    setState(state: any): void;

}

export const API_VERSION: string;

export function ArrayBufferReader(stream: any): void;

export function ArrayBufferWriter(stream: any): void;

export function AudioPlayer(): void;

export function AudioRecorder(): void;

export function BlobReader(stream: any, mimetype: any): any;

export function BlobWriter(stream: any): any;

export function Client(tunnel: any): any;

export function DataURIReader(stream: any, mimetype: any): any;

export function Display(): any;

export function InputStream(client: any, index: any): void;

export function IntegerPool(): any;

export function JSONReader(stream: any): any;

export function Keyboard(element: any): any;

export function Layer(width: any, height: any): any;

export function Mouse(element: any): any;

export function Object(client: any, index: any): any;

export function OnScreenKeyboard(layout: any): any;

export function OutputStream(client: any, index: any): void;

export function Parser(): void;

export function RawAudioFormat(template: any): void;

export function RawAudioPlayer(stream: any, mimetype: any): any;

export function SessionRecording(tunnel: any): any;

export function Status(code: any, message: any): any;

export function StringReader(stream: any): any;

export function StringWriter(stream: any): any;

export function Tunnel(): void;

export function VideoPlayer(): void;

export namespace ArrayBufferReader {
    const prototype: {
    };

}

export namespace ArrayBufferWriter {
    const DEFAULT_BLOB_LENGTH: number;

    const prototype: {
    };

}

export namespace AudioContextFactory {
    const singleton: any;

    function getAudioContext(): any;

    namespace getAudioContext {
        const prototype: {
        };

    }

}

export namespace AudioPlayer {
    const prototype: {
    };

    function getInstance(stream: any, mimetype: any): any;

    function getSupportedTypes(): any;

    function isSupportedType(mimetype: any): any;

    namespace getInstance {
        const prototype: {
        };

    }

    namespace getSupportedTypes {
        const prototype: {
        };

    }

    namespace isSupportedType {
        const prototype: {
        };

    }

}

export namespace AudioRecorder {
    const prototype: {
    };

    function getInstance(stream: any, mimetype: any): any;

    function getSupportedTypes(): any;

    function isSupportedType(mimetype: any): any;

    namespace getInstance {
        const prototype: {
        };

    }

    namespace getSupportedTypes {
        const prototype: {
        };

    }

    namespace isSupportedType {
        const prototype: {
        };

    }

}

export namespace BlobReader {
    const prototype: {
    };

}

export namespace BlobWriter {
    const prototype: {
    };

}

export namespace ChainedTunnel {
    namespace prototype {
        const onerror: any;

        const oninstruction: any;

        const onstatechange: any;

        const receiveTimeout: number;

        const state: number;

        const uuid: any;

        function connect(data: any): void;

        function disconnect(): void;

        function sendMessage(elements: any): void;

        function setState(state: any): void;

        namespace connect {
            const prototype: {
            };

        }

        namespace disconnect {
            const prototype: {
            };

        }

        namespace sendMessage {
            const prototype: {
            };

        }

        namespace setState {
            const prototype: {
            };

        }

    }

}

export namespace Client {
    const prototype: {
    };

    namespace DefaultTransferFunction {
    }

}

export namespace DataURIReader {
    const prototype: {
    };

}

export namespace Display {

    function VisibleLayer(width: any, height: any): any;

    namespace VisibleLayer {
        const prototype: {
        };

    }

}

export namespace HTTPTunnel {
    const onerror: any;

    const oninstruction: any;

    const onstatechange: any;

    const receiveTimeout: number;

    const state: number;

    const uuid: any;

    function connect(data: any): void;

    function disconnect(): void;

    function sendMessage(elements: any): void;

    function setState(state: any): void;

    namespace connect {
        const prototype: {
        };

    }

    namespace disconnect {
        const prototype: {
        };

    }

    namespace sendMessage {
        const prototype: {
        };

    }

    namespace setState {
        const prototype: {
        };

    }

}



export namespace Keyboard {


    function ModifierState(): void;

    namespace ModifierState {
        const prototype: {
        };

        function fromKeyboardEvent(e: any): any;

        namespace fromKeyboardEvent {
            const prototype: {
            };

        }

    }

}

export namespace Mouse {

    function State(x: any, y: any, left: any, middle: any, right: any, up: any, down: any): void;

    function Touchpad(element: any): void;

    function Touchscreen(element: any): any;

    namespace State {
        const prototype: {
        };

    }

    namespace Touchpad {
        const prototype: {
        };

    }

    namespace Touchscreen {
        const prototype: {
        };

    }

}






export namespace StaticHTTPTunnel {
    const onerror: any;

    const oninstruction: any;

    const onstatechange: any;

    const receiveTimeout: number;

    const state: number;

    const uuid: any;

    function connect(data: any): void;

    function disconnect(): void;

    function sendMessage(elements: any): void;

    function setState(state: any): void;

    namespace connect {
        const prototype: {
        };

    }

    namespace disconnect {
        const prototype: {
        };

    }

    namespace sendMessage {
        const prototype: {
        };

    }

    namespace setState {
        const prototype: {
        };

    }

}

export namespace Status {
    const Code: {
        CLIENT_BAD_REQUEST: number;
        CLIENT_BAD_TYPE: number;
        CLIENT_FORBIDDEN: number;
        CLIENT_OVERRUN: number;
        CLIENT_TIMEOUT: number;
        CLIENT_TOO_MANY: number;
        CLIENT_UNAUTHORIZED: number;
        RESOURCE_CLOSED: number;
        RESOURCE_CONFLICT: number;
        RESOURCE_NOT_FOUND: number;
        SERVER_BUSY: number;
        SERVER_ERROR: number;
        SESSION_CLOSED: number;
        SESSION_CONFLICT: number;
        SESSION_TIMEOUT: number;
        SUCCESS: number;
        UNSUPPORTED: number;
        UPSTREAM_ERROR: number;
        UPSTREAM_NOT_FOUND: number;
        UPSTREAM_TIMEOUT: number;
        UPSTREAM_UNAVAILABLE: number;
    };

    const prototype: {
    };

}

export namespace StringReader {
    const prototype: {
    };

}

export namespace StringWriter {
    const prototype: {
    };

}

export namespace Tunnel {
    const INTERNAL_DATA_OPCODE: string;

    const State: {
        CLOSED: number;
        CONNECTING: number;
        OPEN: number;
    };

    const prototype: {
    };

}

export namespace VideoPlayer {

    function getInstance(stream: any, layer: any, mimetype: any): any;

    function getSupportedTypes(): any;

    function isSupportedType(mimetype: any): any;

    namespace getInstance {
        const prototype: {
        };

    }

    namespace getSupportedTypes {
        const prototype: {
        };

    }

    namespace isSupportedType {
        const prototype: {
        };

    }

}

export namespace WebSocketTunnel {
    const onerror: any;

    const oninstruction: any;

    const onstatechange: any;

    const receiveTimeout: number;

    const state: number;

    const uuid: any;

    function connect(data: any): void;

    function disconnect(): void;

    function sendMessage(elements: any): void;

    function setState(state: any): void;

    namespace connect {
        const prototype: {
        };

    }

    namespace disconnect {
        const prototype: {
        };

    }

    namespace sendMessage {
        const prototype: {
        };

    }

    namespace setState {
        const prototype: {
        };

    }

}



